import { Validators as AngularValidators } from '@angular/forms';
import { ValidatorDeclaration } from './validator-declaration';
/**
 * Provides a set of validators used by form controls.
 *
 * Code comments have been copied from the Angular source code.
 */
export class Validators {
    static compose(validators) {
        return validators === null ? AngularValidators.compose(validators) : AngularValidators.compose(validators);
    }
    static min(min, message) {
        return Validators.minValidator(min, message);
    }
    static minDefaultMsg(min) {
        return Validators.maxValidator(min, `This field should not be less than ${min}`);
    }
    static max(max, message) {
        return Validators.maxValidator(max, message);
    }
    static maxDefaultMsg(max) {
        return Validators.maxValidator(max, `This field should not be more than ${max}`);
    }
    static minLength(minLength, message) {
        return Validators.minLengthValidator(minLength, message);
    }
    static minLengthDefaultMsg(minLength) {
        return Validators.maxLengthValidator(minLength, `This field should not be less than ${minLength} characters`);
    }
    static maxLength(maxLength, message) {
        return Validators.maxLengthValidator(maxLength, message);
    }
    static maxLengthDefaultMsg(maxLength) {
        return Validators.maxLengthValidator(maxLength, `This field should not be more than ${maxLength} characters`);
    }
    static pattern(pattern, message = 'This field should match the pattern ' + pattern) {
        return Validators.patternValidator(pattern, message);
    }
    static required(message = 'This field is required') {
        return Validators.requiredValidator(message);
    }
    static requiredTrue(message = 'This field is required') {
        return Validators.requiredTrueValidator(message);
    }
    static email(message = 'Enter valid email') {
        return Validators.emailValidator(message);
    }
}
/**
 * No-op validator.
 */
Validators.nullValidator = AngularValidators.nullValidator;
Validators.composeAsync = AngularValidators.composeAsync;
Validators.minValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.min, 'min');
Validators.maxValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.max, 'max');
Validators.minLengthValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.minLength, 'minlength');
Validators.maxLengthValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.maxLength, 'maxlength');
Validators.patternValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.pattern, 'pattern');
Validators.requiredValidator = ValidatorDeclaration.wrapNoArgumentValidator(AngularValidators.required, 'required');
Validators.requiredTrueValidator = ValidatorDeclaration.wrapNoArgumentValidator(AngularValidators.requiredTrue, 'required');
Validators.emailValidator = ValidatorDeclaration.wrapNoArgumentValidator(AngularValidators.email, 'email');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItcmVhY3RpdmUtdmFsaWRhdGlvbi9zcmMvbGliL3ZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsSUFBSSxpQkFBaUIsRUFBZSxNQUFNLGdCQUFnQixDQUFDO0FBRTlFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRS9EOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sVUFBVTtJQTBCckIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUErQztRQUM1RCxPQUFPLFVBQVUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdHLENBQUM7SUE4QkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUE0QixFQUFFLE9BQTRDO1FBQ25GLE9BQU8sVUFBVSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBVztRQUM5QixPQUFPLFVBQVUsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLHNDQUFzQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUE2QkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUE0QixFQUFFLE9BQTRDO1FBQ25GLE9BQU8sVUFBVSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBVztRQUM5QixPQUFPLFVBQVUsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLHNDQUFzQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUE4QkQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFrQyxFQUFFLE9BQWtEO1FBQ3JHLE9BQU8sVUFBVSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBQ0QsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQWlCO1FBQzFDLE9BQU8sVUFBVSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxzQ0FBc0MsU0FBUyxhQUFhLENBQUMsQ0FBQztJQUNoSCxDQUFDO0lBOEJELE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBa0MsRUFBRSxPQUFrRDtRQUNyRyxPQUFPLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUNELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFpQjtRQUMxQyxPQUFPLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsc0NBQXNDLFNBQVMsYUFBYSxDQUFDLENBQUM7SUFDaEgsQ0FBQztJQXNCRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWdELEVBQUUsVUFBa0Isc0NBQXNDLEdBQUUsT0FBTztRQUNoSSxPQUFPLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQVlELE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBa0Isd0JBQXdCO1FBQ3hELE9BQU8sVUFBVSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFZRCxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQWtCLHdCQUF3QjtRQUM1RCxPQUFPLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBWUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFrQixtQkFBbUI7UUFDaEQsT0FBTyxVQUFVLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUM7O0FBeE9IOztHQUVHO0FBQ00sd0JBQWEsR0FBRyxpQkFBaUIsQ0FBQyxhQUFhLENBQUM7QUFDaEQsdUJBQVksR0FBRyxpQkFBaUIsQ0FBQyxZQUFZLENBQUM7QUFFdEMsdUJBQVksR0FBRyxvQkFBb0IsQ0FBQywyQkFBMkIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUYsdUJBQVksR0FBRyxvQkFBb0IsQ0FBQywyQkFBMkIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUYsNkJBQWtCLEdBQUcsb0JBQW9CLENBQUMsMkJBQTJCLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ2hILDZCQUFrQixHQUFHLG9CQUFvQixDQUFDLDJCQUEyQixDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNoSCwyQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQywyQkFBMkIsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDMUcsNEJBQWlCLEdBQUcsb0JBQW9CLENBQUMsdUJBQXVCLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3pHLGdDQUFxQixHQUFHLG9CQUFvQixDQUFDLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNqSCx5QkFBYyxHQUFHLG9CQUFvQixDQUFDLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRvcnMgYXMgQW5ndWxhclZhbGlkYXRvcnMsIFZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuaW1wb3J0IHsgVmFsaWRhdG9yRGVjbGFyYXRpb24gfSBmcm9tICcuL3ZhbGlkYXRvci1kZWNsYXJhdGlvbic7XHJcblxyXG4vKipcclxuICogUHJvdmlkZXMgYSBzZXQgb2YgdmFsaWRhdG9ycyB1c2VkIGJ5IGZvcm0gY29udHJvbHMuXHJcbiAqXHJcbiAqIENvZGUgY29tbWVudHMgaGF2ZSBiZWVuIGNvcGllZCBmcm9tIHRoZSBBbmd1bGFyIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZhbGlkYXRvcnMge1xyXG4vKipcclxuICogTm8tb3AgdmFsaWRhdG9yLlxyXG4gKi9cclxuICBzdGF0aWMgbnVsbFZhbGlkYXRvciA9IEFuZ3VsYXJWYWxpZGF0b3JzLm51bGxWYWxpZGF0b3I7XHJcbiAgc3RhdGljIGNvbXBvc2VBc3luYyA9IEFuZ3VsYXJWYWxpZGF0b3JzLmNvbXBvc2VBc3luYztcclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgbWluVmFsaWRhdG9yID0gVmFsaWRhdG9yRGVjbGFyYXRpb24ud3JhcFNpbmdsZUFyZ3VtZW50VmFsaWRhdG9yKEFuZ3VsYXJWYWxpZGF0b3JzLm1pbiwgJ21pbicpO1xyXG4gIHByaXZhdGUgc3RhdGljIG1heFZhbGlkYXRvciA9IFZhbGlkYXRvckRlY2xhcmF0aW9uLndyYXBTaW5nbGVBcmd1bWVudFZhbGlkYXRvcihBbmd1bGFyVmFsaWRhdG9ycy5tYXgsICdtYXgnKTtcclxuICBwcml2YXRlIHN0YXRpYyBtaW5MZW5ndGhWYWxpZGF0b3IgPSBWYWxpZGF0b3JEZWNsYXJhdGlvbi53cmFwU2luZ2xlQXJndW1lbnRWYWxpZGF0b3IoQW5ndWxhclZhbGlkYXRvcnMubWluTGVuZ3RoLCAnbWlubGVuZ3RoJyk7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgbWF4TGVuZ3RoVmFsaWRhdG9yID0gVmFsaWRhdG9yRGVjbGFyYXRpb24ud3JhcFNpbmdsZUFyZ3VtZW50VmFsaWRhdG9yKEFuZ3VsYXJWYWxpZGF0b3JzLm1heExlbmd0aCwgJ21heGxlbmd0aCcpO1xyXG4gIHByaXZhdGUgc3RhdGljIHBhdHRlcm5WYWxpZGF0b3IgPSBWYWxpZGF0b3JEZWNsYXJhdGlvbi53cmFwU2luZ2xlQXJndW1lbnRWYWxpZGF0b3IoQW5ndWxhclZhbGlkYXRvcnMucGF0dGVybiwgJ3BhdHRlcm4nKTtcclxuICBwcml2YXRlIHN0YXRpYyByZXF1aXJlZFZhbGlkYXRvciA9IFZhbGlkYXRvckRlY2xhcmF0aW9uLndyYXBOb0FyZ3VtZW50VmFsaWRhdG9yKEFuZ3VsYXJWYWxpZGF0b3JzLnJlcXVpcmVkLCAncmVxdWlyZWQnKTtcclxuICBwcml2YXRlIHN0YXRpYyByZXF1aXJlZFRydWVWYWxpZGF0b3IgPSBWYWxpZGF0b3JEZWNsYXJhdGlvbi53cmFwTm9Bcmd1bWVudFZhbGlkYXRvcihBbmd1bGFyVmFsaWRhdG9ycy5yZXF1aXJlZFRydWUsICdyZXF1aXJlZCcpO1xyXG4gIHByaXZhdGUgc3RhdGljIGVtYWlsVmFsaWRhdG9yID0gVmFsaWRhdG9yRGVjbGFyYXRpb24ud3JhcE5vQXJndW1lbnRWYWxpZGF0b3IoQW5ndWxhclZhbGlkYXRvcnMuZW1haWwsICdlbWFpbCcpO1xyXG5cclxuICAvKipcclxuICAgKiBDb21wb3NlIG11bHRpcGxlIHZhbGlkYXRvcnMgaW50byBhIHNpbmdsZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHVuaW9uXHJcbiAgICogb2YgdGhlIGluZGl2aWR1YWwgZXJyb3IgbWFwcy5cclxuICAgKi9cclxuICBzdGF0aWMgY29tcG9zZSh2YWxpZGF0b3JzOiBudWxsKTogbnVsbDtcclxuICAvKipcclxuICAgKiBDb21wb3NlIG11bHRpcGxlIHZhbGlkYXRvcnMgaW50byBhIHNpbmdsZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHVuaW9uXHJcbiAgICogb2YgdGhlIGluZGl2aWR1YWwgZXJyb3IgbWFwcy5cclxuICAgKi9cclxuICBzdGF0aWMgY29tcG9zZSh2YWxpZGF0b3JzOiAoVmFsaWRhdG9yRm58bnVsbHx1bmRlZmluZWQpW10pOiBWYWxpZGF0b3JGbnxudWxsO1xyXG4gIHN0YXRpYyBjb21wb3NlKHZhbGlkYXRvcnM6IChWYWxpZGF0b3JGbnxudWxsfHVuZGVmaW5lZClbXXxudWxsKTogVmFsaWRhdG9yRm58bnVsbCB7XHJcbiAgICByZXR1cm4gdmFsaWRhdG9ycyA9PT0gbnVsbCA/IEFuZ3VsYXJWYWxpZGF0b3JzLmNvbXBvc2UodmFsaWRhdG9ycykgOiBBbmd1bGFyVmFsaWRhdG9ycy5jb21wb3NlKHZhbGlkYXRvcnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBhIG51bWJlci5cclxuICAgKiBOb3RlOiB3aGVuIHVzaW5nIHRoaXMgZnVuY3Rpb24gd2l0aG91dCBzcGVjaWZ5aW5nIGEgbWVzc2FnZSwgeW91IGhhdmUgdG8gZGVjbGFyZSBhblxyXG4gICAqIGFydi12YWxpZGF0aW9uLW1lc3NhZ2UgZWxlbWVudCBpbiB0aGUgSFRNTCB3aXRoIGEgY3VzdG9tIG1lc3NhZ2UuXHJcbiAgICovXHJcbiAgc3RhdGljIG1pbihtaW46IG51bWJlcik6IFZhbGlkYXRvckZuO1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYSBudW1iZXIuXHJcbiAgICovXHJcbiAgc3RhdGljIG1pbihtaW46IG51bWJlciwgbWVzc2FnZTogc3RyaW5nKTogVmFsaWRhdG9yRm47XHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBhIG51bWJlci5cclxuICAgKiBOb3RlOiB3aGVuIHVzaW5nIHRoaXMgZnVuY3Rpb24gd2l0aG91dCBzcGVjaWZ5aW5nIGEgbWVzc2FnZSwgeW91IGhhdmUgdG8gZGVjbGFyZSBhblxyXG4gICAqIGFydi12YWxpZGF0aW9uLW1lc3NhZ2UgZWxlbWVudCBpbiB0aGUgSFRNTCB3aXRoIGEgY3VzdG9tIG1lc3NhZ2UuXHJcbiAgICovXHJcbiAgc3RhdGljIG1pbihtaW46ICgpID0+IG51bWJlcik6IFZhbGlkYXRvckZuO1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYSBudW1iZXIuXHJcbiAgICovXHJcbiAgc3RhdGljIG1pbihtaW46ICgpID0+IG51bWJlciwgbWVzc2FnZTogc3RyaW5nKTogVmFsaWRhdG9yRm47XHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBhIG51bWJlci5cclxuICAgKi9cclxuICBzdGF0aWMgbWluKG1pbjogbnVtYmVyLCBtZXNzYWdlRnVuYzogKChtaW46IG51bWJlcikgPT4gc3RyaW5nKSk6IFZhbGlkYXRvckZuO1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYSBudW1iZXIuXHJcbiAgICovXHJcbiAgc3RhdGljIG1pbihtaW46ICgpID0+IG51bWJlciwgbWVzc2FnZUZ1bmM6ICgobWluOiBudW1iZXIpID0+IHN0cmluZykpOiBWYWxpZGF0b3JGbjtcclxuICBzdGF0aWMgbWluKG1pbjogbnVtYmVyIHwgKCgpID0+IG51bWJlciksIG1lc3NhZ2U/OiBzdHJpbmcgfCAoKG1pbjogbnVtYmVyKSA9PiBzdHJpbmcpKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIFZhbGlkYXRvcnMubWluVmFsaWRhdG9yKG1pbiwgbWVzc2FnZSk7XHJcbiAgfVxyXG4gIHN0YXRpYyBtaW5EZWZhdWx0TXNnKG1pbjogbnVtYmVyKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIFZhbGlkYXRvcnMubWF4VmFsaWRhdG9yKG1pbiwgYFRoaXMgZmllbGQgc2hvdWxkIG5vdCBiZSBsZXNzIHRoYW4gJHttaW59YCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYSBudW1iZXIuXHJcbiAgICogTm90ZTogd2hlbiB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpdGhvdXQgc3BlY2lmeWluZyBhIG1lc3NhZ2UsIHlvdSBoYXZlIHRvIGRlY2xhcmUgYW5cclxuICAgKiBhcnYtdmFsaWRhdGlvbi1tZXNzYWdlIGVsZW1lbnQgaW4gdGhlIEhUTUwgd2l0aCBhIGN1c3RvbSBtZXNzYWdlLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXgobWF4OiBudW1iZXIpOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9scyB0byBoYXZlIGEgdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGEgbnVtYmVyLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXgobWF4OiBudW1iZXIsIG1lc3NhZ2U6IHN0cmluZyk6IFZhbGlkYXRvckZuO1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYSBudW1iZXIuXHJcbiAgICogTm90ZTogd2hlbiB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpdGhvdXQgc3BlY2lmeWluZyBhIG1lc3NhZ2UsIHlvdSBoYXZlIHRvIGRlY2xhcmUgYW5cclxuICAgKiBhcnYtdmFsaWRhdGlvbi1tZXNzYWdlIGVsZW1lbnQgaW4gdGhlIEhUTUwgd2l0aCBhIGN1c3RvbSBtZXNzYWdlLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXgobWF4OiAoKSA9PiBudW1iZXIpOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9scyB0byBoYXZlIGEgdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGEgbnVtYmVyLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXgobWF4OiAoKSA9PiBudW1iZXIsIG1lc3NhZ2U6IHN0cmluZyk6IFZhbGlkYXRvckZuO1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYSBudW1iZXIuXHJcbiAgICovXHJcbiAgc3RhdGljIG1heChtYXg6IG51bWJlciwgbWVzc2FnZUZ1bmM6ICgobWF4OiBudW1iZXIpID0+IHN0cmluZykpOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9scyB0byBoYXZlIGEgdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGEgbnVtYmVyLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXgobWF4OiAoKSA9PiBudW1iZXIsIG1lc3NhZ2VGdW5jOiAoKG1heDogbnVtYmVyKSA9PiBzdHJpbmcpKTogVmFsaWRhdG9yRm47XHJcbiAgc3RhdGljIG1heChtYXg6IG51bWJlciB8ICgoKSA9PiBudW1iZXIpLCBtZXNzYWdlPzogc3RyaW5nIHwgKChtYXg6IG51bWJlcikgPT4gc3RyaW5nKSk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiBWYWxpZGF0b3JzLm1heFZhbGlkYXRvcihtYXgsIG1lc3NhZ2UpO1xyXG4gIH1cclxuICBzdGF0aWMgbWF4RGVmYXVsdE1zZyhtYXg6IG51bWJlcik6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiBWYWxpZGF0b3JzLm1heFZhbGlkYXRvcihtYXgsIGBUaGlzIGZpZWxkIHNob3VsZCBub3QgYmUgbW9yZSB0aGFuICR7bWF4fWApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIG9mIGEgbWluaW11bSBsZW5ndGguXHJcbiAgICogTm90ZTogd2hlbiB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpdGhvdXQgc3BlY2lmeWluZyBhIG1lc3NhZ2UsIHlvdSBoYXZlIHRvIGRlY2xhcmUgYW5cclxuICAgKiBhcnYtdmFsaWRhdGlvbi1tZXNzYWdlIGVsZW1lbnQgaW4gdGhlIEhUTUwgd2l0aCBhIGN1c3RvbSBtZXNzYWdlLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtaW5MZW5ndGgobWluTGVuZ3RoOiBudW1iZXIpOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9scyB0byBoYXZlIGEgdmFsdWUgb2YgYSBtaW5pbXVtIGxlbmd0aC5cclxuICAgKi9cclxuICBzdGF0aWMgbWluTGVuZ3RoKG1pbkxlbmd0aDogbnVtYmVyLCBtZXNzYWdlOiBzdHJpbmcpOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9scyB0byBoYXZlIGEgdmFsdWUgb2YgYSBtaW5pbXVtIGxlbmd0aC5cclxuICAgKiBOb3RlOiB3aGVuIHVzaW5nIHRoaXMgZnVuY3Rpb24gd2l0aG91dCBzcGVjaWZ5aW5nIGEgbWVzc2FnZSwgeW91IGhhdmUgdG8gZGVjbGFyZSBhblxyXG4gICAqIGFydi12YWxpZGF0aW9uLW1lc3NhZ2UgZWxlbWVudCBpbiB0aGUgSFRNTCB3aXRoIGEgY3VzdG9tIG1lc3NhZ2UuXHJcbiAgICovXHJcbiAgc3RhdGljIG1pbkxlbmd0aChtaW5MZW5ndGg6ICgpID0+IG51bWJlcik6IFZhbGlkYXRvckZuO1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBvZiBhIG1pbmltdW0gbGVuZ3RoLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtaW5MZW5ndGgobWluTGVuZ3RoOiAoKSA9PiBudW1iZXIsIG1lc3NhZ2U6IHN0cmluZyk6IFZhbGlkYXRvckZuO1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBvZiBhIG1pbmltdW0gbGVuZ3RoLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtaW5MZW5ndGgobWluTGVuZ3RoOiBudW1iZXIsIG1lc3NhZ2VGdW5jOiAoKG1pbkxlbmd0aDogbnVtYmVyKSA9PiBzdHJpbmcpKTogVmFsaWRhdG9yRm47XHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIG9mIGEgbWluaW11bSBsZW5ndGguXHJcbiAgICovXHJcbiAgc3RhdGljIG1pbkxlbmd0aChtaW5MZW5ndGg6ICgpID0+IG51bWJlciwgbWVzc2FnZUZ1bmM6ICgobWluTGVuZ3RoOiBudW1iZXIpID0+IHN0cmluZykpOiBWYWxpZGF0b3JGbjtcclxuICBzdGF0aWMgbWluTGVuZ3RoKG1pbkxlbmd0aDogbnVtYmVyIHwgKCgpID0+IG51bWJlciksIG1lc3NhZ2U/OiBzdHJpbmcgfCAoKG1pbkxlbmd0aDogbnVtYmVyKSA9PiBzdHJpbmcpKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIFZhbGlkYXRvcnMubWluTGVuZ3RoVmFsaWRhdG9yKG1pbkxlbmd0aCwgbWVzc2FnZSk7XHJcbiAgfVxyXG4gIHN0YXRpYyBtaW5MZW5ndGhEZWZhdWx0TXNnKG1pbkxlbmd0aDogbnVtYmVyKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIFZhbGlkYXRvcnMubWF4TGVuZ3RoVmFsaWRhdG9yKG1pbkxlbmd0aCwgYFRoaXMgZmllbGQgc2hvdWxkIG5vdCBiZSBsZXNzIHRoYW4gJHttaW5MZW5ndGh9IGNoYXJhY3RlcnNgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBvZiBhIG1heGltdW0gbGVuZ3RoLlxyXG4gICAqIE5vdGU6IHdoZW4gdXNpbmcgdGhpcyBmdW5jdGlvbiB3aXRob3V0IHNwZWNpZnlpbmcgYSBtZXNzYWdlLCB5b3UgaGF2ZSB0byBkZWNsYXJlIGFuXHJcbiAgICogYXJ2LXZhbGlkYXRpb24tbWVzc2FnZSBlbGVtZW50IGluIHRoZSBIVE1MIHdpdGggYSBjdXN0b20gbWVzc2FnZS5cclxuICAgKi9cclxuICBzdGF0aWMgbWF4TGVuZ3RoKG1heExlbmd0aDogbnVtYmVyKTogVmFsaWRhdG9yRm47XHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIG9mIGEgbWF4aW11bSBsZW5ndGguXHJcbiAgICovXHJcbiAgc3RhdGljIG1heExlbmd0aChtYXhMZW5ndGg6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nKTogVmFsaWRhdG9yRm47XHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIG9mIGEgbWF4aW11bSBsZW5ndGguXHJcbiAgICogTm90ZTogd2hlbiB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpdGhvdXQgc3BlY2lmeWluZyBhIG1lc3NhZ2UsIHlvdSBoYXZlIHRvIGRlY2xhcmUgYW5cclxuICAgKiBhcnYtdmFsaWRhdGlvbi1tZXNzYWdlIGVsZW1lbnQgaW4gdGhlIEhUTUwgd2l0aCBhIGN1c3RvbSBtZXNzYWdlLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXhMZW5ndGgobWF4TGVuZ3RoOiAoKSA9PiBudW1iZXIpOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9scyB0byBoYXZlIGEgdmFsdWUgb2YgYSBtYXhpbXVtIGxlbmd0aC5cclxuICAgKi9cclxuICBzdGF0aWMgbWF4TGVuZ3RoKG1heExlbmd0aDogKCkgPT4gbnVtYmVyLCBtZXNzYWdlOiBzdHJpbmcpOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9scyB0byBoYXZlIGEgdmFsdWUgb2YgYSBtYXhpbXVtIGxlbmd0aC5cclxuICAgKi9cclxuICBzdGF0aWMgbWF4TGVuZ3RoKG1heExlbmd0aDogbnVtYmVyLCBtZXNzYWdlRnVuYzogKChtYXhMZW5ndGg6IG51bWJlcikgPT4gc3RyaW5nKSk6IFZhbGlkYXRvckZuO1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBvZiBhIG1heGltdW0gbGVuZ3RoLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXhMZW5ndGgobWF4TGVuZ3RoOiAoKSA9PiBudW1iZXIsIG1lc3NhZ2VGdW5jOiAoKG1heExlbmd0aDogbnVtYmVyKSA9PiBzdHJpbmcpKTogVmFsaWRhdG9yRm47XHJcbiAgc3RhdGljIG1heExlbmd0aChtYXhMZW5ndGg6IG51bWJlciB8ICgoKSA9PiBudW1iZXIpLCBtZXNzYWdlPzogc3RyaW5nIHwgKChtYXhMZW5ndGg6IG51bWJlcikgPT4gc3RyaW5nKSk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiBWYWxpZGF0b3JzLm1heExlbmd0aFZhbGlkYXRvcihtYXhMZW5ndGgsIG1lc3NhZ2UpO1xyXG4gIH1cclxuICBzdGF0aWMgbWF4TGVuZ3RoRGVmYXVsdE1zZyhtYXhMZW5ndGg6IG51bWJlcik6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiBWYWxpZGF0b3JzLm1heExlbmd0aFZhbGlkYXRvcihtYXhMZW5ndGgsIGBUaGlzIGZpZWxkIHNob3VsZCBub3QgYmUgbW9yZSB0aGFuICR7bWF4TGVuZ3RofSBjaGFyYWN0ZXJzYCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBhIGNvbnRyb2wgdG8gbWF0Y2ggYSByZWdleCB0byBpdHMgdmFsdWUuXHJcbiAgICogTm90ZTogd2hlbiB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpdGhvdXQgc3BlY2lmeWluZyBhIG1lc3NhZ2UsIHlvdSBoYXZlIHRvIGRlY2xhcmUgYW5cclxuICAgKiBhcnYtdmFsaWRhdGlvbi1tZXNzYWdlIGVsZW1lbnQgaW4gdGhlIEhUTUwgd2l0aCBhIGN1c3RvbSBtZXNzYWdlLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBwYXR0ZXJuKHBhdHRlcm46IHN0cmluZ3xSZWdFeHApOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBhIGNvbnRyb2wgdG8gbWF0Y2ggYSByZWdleCB0byBpdHMgdmFsdWUuXHJcbiAgICovXHJcbiAgc3RhdGljIHBhdHRlcm4ocGF0dGVybjogc3RyaW5nfFJlZ0V4cCwgbWVzc2FnZTogc3RyaW5nKTogVmFsaWRhdG9yRm47XHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgYSBjb250cm9sIHRvIG1hdGNoIGEgcmVnZXggdG8gaXRzIHZhbHVlLlxyXG4gICAqIE5vdGU6IHdoZW4gdXNpbmcgdGhpcyBmdW5jdGlvbiB3aXRob3V0IHNwZWNpZnlpbmcgYSBtZXNzYWdlLCB5b3UgaGF2ZSB0byBkZWNsYXJlIGFuXHJcbiAgICogYXJ2LXZhbGlkYXRpb24tbWVzc2FnZSBlbGVtZW50IGluIHRoZSBIVE1MIHdpdGggYSBjdXN0b20gbWVzc2FnZS5cclxuICAgKi9cclxuICBzdGF0aWMgcGF0dGVybihwYXR0ZXJuOiAoKSA9PiBzdHJpbmd8UmVnRXhwKTogVmFsaWRhdG9yRm47XHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgYSBjb250cm9sIHRvIG1hdGNoIGEgcmVnZXggdG8gaXRzIHZhbHVlLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBwYXR0ZXJuKHBhdHRlcm46ICgpID0+IHN0cmluZ3xSZWdFeHAsIG1lc3NhZ2U6IHN0cmluZyk6IFZhbGlkYXRvckZuO1xyXG4gIHN0YXRpYyBwYXR0ZXJuKHBhdHRlcm46IChzdHJpbmd8UmVnRXhwKSB8ICgoKSA9PiBzdHJpbmd8UmVnRXhwKSwgbWVzc2FnZTogc3RyaW5nID0gJ1RoaXMgZmllbGQgc2hvdWxkIG1hdGNoIHRoZSBwYXR0ZXJuICcrIHBhdHRlcm4pOiBWYWxpZGF0b3JGbiB7XHJcbiAgICByZXR1cm4gVmFsaWRhdG9ycy5wYXR0ZXJuVmFsaWRhdG9yKHBhdHRlcm4sIG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIG5vbi1lbXB0eSB2YWx1ZS5cclxuICAgKiBOb3RlOiB3aGVuIHVzaW5nIHRoaXMgZnVuY3Rpb24gd2l0aG91dCBzcGVjaWZ5aW5nIGEgbWVzc2FnZSwgeW91IGhhdmUgdG8gZGVjbGFyZSBhblxyXG4gICAqIGFydi12YWxpZGF0aW9uLW1lc3NhZ2UgZWxlbWVudCBpbiB0aGUgSFRNTCB3aXRoIGEgY3VzdG9tIG1lc3NhZ2UuXHJcbiAgICovXHJcbiAgc3RhdGljIHJlcXVpcmVkKCk6IFZhbGlkYXRvckZuO1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSBub24tZW1wdHkgdmFsdWUuXHJcbiAgICovXHJcbiAgc3RhdGljIHJlcXVpcmVkKG1lc3NhZ2U6IHN0cmluZyk6IFZhbGlkYXRvckZuO1xyXG4gIHN0YXRpYyByZXF1aXJlZChtZXNzYWdlOiBzdHJpbmcgPSAnVGhpcyBmaWVsZCBpcyByZXF1aXJlZCcpOiBWYWxpZGF0b3JGbiB7XHJcbiAgICByZXR1cm4gVmFsaWRhdG9ycy5yZXF1aXJlZFZhbGlkYXRvcihtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2wgdmFsdWUgdG8gYmUgdHJ1ZS5cclxuICAgKiBOb3RlOiB3aGVuIHVzaW5nIHRoaXMgZnVuY3Rpb24gd2l0aG91dCBzcGVjaWZ5aW5nIGEgbWVzc2FnZSwgeW91IGhhdmUgdG8gZGVjbGFyZSBhblxyXG4gICAqIGFydi12YWxpZGF0aW9uLW1lc3NhZ2UgZWxlbWVudCBpbiB0aGUgSFRNTCB3aXRoIGEgY3VzdG9tIG1lc3NhZ2UuXHJcbiAgICovXHJcbiAgc3RhdGljIHJlcXVpcmVkVHJ1ZSgpOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9sIHZhbHVlIHRvIGJlIHRydWUuXHJcbiAgICovXHJcbiAgc3RhdGljIHJlcXVpcmVkVHJ1ZShtZXNzYWdlOiBzdHJpbmcpOiBWYWxpZGF0b3JGbjtcclxuICBzdGF0aWMgcmVxdWlyZWRUcnVlKG1lc3NhZ2U6IHN0cmluZyA9ICdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkJyk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiBWYWxpZGF0b3JzLnJlcXVpcmVkVHJ1ZVZhbGlkYXRvcihtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRvciB0aGF0IHBlcmZvcm1zIGVtYWlsIHZhbGlkYXRpb24uXHJcbiAgICogTm90ZTogd2hlbiB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpdGhvdXQgc3BlY2lmeWluZyBhIG1lc3NhZ2UsIHlvdSBoYXZlIHRvIGRlY2xhcmUgYW5cclxuICAgKiBhcnYtdmFsaWRhdGlvbi1tZXNzYWdlIGVsZW1lbnQgaW4gdGhlIEhUTUwgd2l0aCBhIGN1c3RvbSBtZXNzYWdlLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBlbWFpbCgpOiBWYWxpZGF0b3JGbjtcclxuICAvKipcclxuICAgKiBWYWxpZGF0b3IgdGhhdCBwZXJmb3JtcyBlbWFpbCB2YWxpZGF0aW9uLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBlbWFpbChtZXNzYWdlOiBzdHJpbmcpOiBWYWxpZGF0b3JGbjtcclxuICBzdGF0aWMgZW1haWwobWVzc2FnZTogc3RyaW5nID0gJ0VudGVyIHZhbGlkIGVtYWlsJyk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiBWYWxpZGF0b3JzLmVtYWlsVmFsaWRhdG9yKG1lc3NhZ2UpO1xyXG4gIH1cclxufVxyXG4iXX0=