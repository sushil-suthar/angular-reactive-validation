/**
 * @dynamic
 */
export class ValidatorDeclaration {
    /**
     * Wraps your own validator functions for use with the angular-reactive-validation library.
     *
     * @param validatorFn A function you want to wrap which can validate a control.
     * @param resultKey The error key used for indicating an error result as returned from the ValidatorFn.
     */
    static wrapNoArgumentValidator(validatorFn, resultKey) {
        return (message) => (control) => ValidatorDeclaration.validateAndSetMessageIfInvalid(control, () => validatorFn, resultKey, message);
    }
    /**
     * Wraps your own validator functions for use with the angular-reactive-validation library.
     *
     * @param validatorFactoryFn A function which accepts a single argument and returns a ValidatorFn.
     * @param resultKey The error key used for indicating an error result as returned from the ValidatorFn.
     */
    static wrapSingleArgumentValidator(validatorFactoryFn, resultKey) {
        return (arg1, message) => (control) => {
            const unwrappedArg1 = ValidatorDeclaration.unwrapArgument(arg1);
            return ValidatorDeclaration.validateAndSetMessageIfInvalid(control, validatorFactoryFn, resultKey, message, unwrappedArg1);
        };
    }
    /**
     * Wraps your own validator functions for use with the angular-reactive-validation library.
     *
     * @param validatorFactoryFn A function which accepts two arguments and returns a ValidatorFn.
     * @param resultKey The error key used for indicating an error result as returned from the ValidatorFn.
     */
    static wrapTwoArgumentValidator(validatorFactoryFn, resultKey) {
        return (arg1, arg2, message) => (control) => {
            const unwrappedArg1 = ValidatorDeclaration.unwrapArgument(arg1);
            const unwrappedArg2 = ValidatorDeclaration.unwrapArgument(arg2);
            return ValidatorDeclaration.validateAndSetMessageIfInvalid(control, validatorFactoryFn, resultKey, message, unwrappedArg1, unwrappedArg2);
        };
    }
    static unwrapArgument(arg) {
        if (arg instanceof Function) {
            arg = arg();
        }
        return arg;
    }
    static validateAndSetMessageIfInvalid(control, 
    // eslint-disable-next-line @typescript-eslint/no-shadow
    validatorFactoryFn, resultKey, 
    // eslint-disable-next-line @typescript-eslint/no-shadow
    message, ...args) {
        const validationResult = ValidatorDeclaration.validate(control, validatorFactoryFn, ...args);
        ValidatorDeclaration.setMessageIfInvalid(control, resultKey, validationResult, message, ...args);
        return validationResult;
    }
    // eslint-disable-next-line @typescript-eslint/no-shadow
    static validate(control, validatorFactoryFn, ...args) {
        const wrappedValidatorFn = validatorFactoryFn(...args);
        return wrappedValidatorFn(control);
    }
    static setMessageIfInvalid(control, resultKey, 
    // eslint-disable-next-line @typescript-eslint/no-shadow
    validationResult, message, ...args) {
        if (message) {
            if (validationResult && validationResult[resultKey]) {
                if (typeof message === 'function') {
                    message = message(...args);
                }
                // Not all validators set an object. Often they'll simply set a property to true.
                // Here, we replace any non-object (or array) to be an object on which we can set a message.
                if (!ValidatorDeclaration.isObject(validationResult[resultKey])) {
                    validationResult[resultKey] = {};
                }
                validationResult[resultKey]['message'] = message;
            }
        }
    }
    static isObject(arg) {
        return arg !== null && typeof arg === 'object' && !Array.isArray(arg);
    }
}
//# sourceMappingURL=data:application/json;base64,