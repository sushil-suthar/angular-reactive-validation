{"version":3,"file":"angular-reactive-validation-extended.mjs","sources":["../../../projects/angular-reactive-validation/src/lib/form/form.directive.ts","../../../projects/angular-reactive-validation/src/lib/get-form-control-from-container.ts","../../../projects/angular-reactive-validation/src/lib/validation-message/validation-message.component.ts","../../../projects/angular-reactive-validation/src/lib/validation-message/validation-message.component.html","../../../projects/angular-reactive-validation/src/lib/validation-error.ts","../../../projects/angular-reactive-validation/src/lib/reactive-validation-module-configuration-token.ts","../../../projects/angular-reactive-validation/src/lib/get-control-path.ts","../../../projects/angular-reactive-validation/src/lib/validation-messages/validation-messages.component.ts","../../../projects/angular-reactive-validation/src/lib/validation-messages/validation-messages.component.html","../../../projects/angular-reactive-validation/src/lib/reactive-validation.module.ts","../../../projects/angular-reactive-validation/src/lib/validator-declaration.ts","../../../projects/angular-reactive-validation/src/lib/validators.ts","../../../projects/angular-reactive-validation/src/angular-reactive-validation-extended.ts"],"sourcesContent":["import { Directive } from '@angular/core';\r\nimport { FormGroupDirective } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: 'form[formGroup]'\r\n})\r\n/**\r\n * Encapsulates properties and events of the form and makes them available for child components.\r\n */\r\nexport class FormDirective {\r\n  /**\r\n   * Observable which emits when the form is submitted.\r\n   */\r\n  submitted: Observable<any>;\r\n\r\n  constructor(formGroupDirective: FormGroupDirective) {\r\n    this.submitted = formGroupDirective.ngSubmit.asObservable();\r\n  }\r\n}\r\n","import { UntypedFormGroup, UntypedFormControl, ControlContainer, FormGroupDirective } from '@angular/forms';\r\n\r\nexport const getFormControlFromContainer = (name: string, controlContainer: ControlContainer | undefined): UntypedFormControl => {\r\n  if (controlContainer) {\r\n    const control = (controlContainer.control as UntypedFormGroup).controls[name];\r\n    if (!control) {\r\n      throw new Error(`There is no control named '${name}'` +\r\n        (getPath(controlContainer).length > 0 ? ` within '${getPath(controlContainer).join('.')}'` : '') + '.');\r\n    }\r\n    if (!(control instanceof UntypedFormControl)) {\r\n      throw new Error(`The control named '${name}' ` +\r\n        (getPath(controlContainer).length > 0 ? `within '${getPath(controlContainer).join('.')}' ` : '') +\r\n        `is not a FormControl. Maybe you accidentally referenced a FormGroup or FormArray?`);\r\n    }\r\n\r\n    return control;\r\n  } else {\r\n    throw new Error(`You can't pass a string to arv-validation-messages's for attribute, when the ` +\r\n      `arv-validation-messages element is not a child of an element with a formGroupName or formGroup declaration.`);\r\n  }\r\n};\r\n\r\nexport const isControlContainerVoidOrInitialized = (controlContainer: ControlContainer | undefined) =>\r\n!!(!controlContainer || (controlContainer as FormGroupDirective).form ||\r\n    (controlContainer.formDirective && (controlContainer.formDirective as FormGroupDirective).form));\r\n\r\nconst getPath = (controlContainer: ControlContainer): string[] => controlContainer.path || [];\r\n","import { Component, Input, ViewEncapsulation, Optional, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, ValidationErrors, ControlContainer } from '@angular/forms';\r\n\r\nimport { ValidationError } from '../validation-error';\r\nimport { getFormControlFromContainer, isControlContainerVoidOrInitialized } from '../get-form-control-from-container';\r\n\r\n@Component({\r\n  selector: 'arv-validation-message',\r\n  templateUrl: './validation-message.component.html',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n/**\r\n * The ValidationMessageComponent lets the developer specify a custom visual style and custom error message\r\n * for edge-cases where the standard style or message capabilities do not suffice.\r\n *\r\n * TODO: Trigger revalidation by parent whenever [for] changes.\r\n */\r\nexport class ValidationMessageComponent implements OnInit {\r\n\r\n  @Input()\r\n  /**\r\n   * The FormControl for which a custom validation message should be shown. This is only required when the parent\r\n   * ValidationMessagesComponent has multiple FormControls specified.\r\n   */\r\n  set for(control: UntypedFormControl | string | undefined) {\r\n    if (!isControlContainerVoidOrInitialized(this.controlContainer)) {\r\n      this.initializeForOnInit = () => this.for = control;\r\n      return;\r\n    }\r\n    this._for = typeof control === 'string' ? getFormControlFromContainer(control, this.controlContainer) : control;\r\n  }\r\n  get for(): UntypedFormControl | string | undefined {\r\n    return this._for;\r\n  }\r\n\r\n  @Input()\r\n  /**\r\n   * The name of the returned validation object property for which the custom validation message should be shown.\r\n   */\r\n  key: string | undefined;\r\n\r\n  private _context: ValidationErrors | undefined;\r\n  private _for: UntypedFormControl | undefined;\r\n\r\n  constructor(@Optional() private controlContainer: ControlContainer) { }\r\n\r\n  ngOnInit() {\r\n    this.initializeForOnInit();\r\n  }\r\n\r\n  canHandle(error: ValidationError) {\r\n    return (!this.for || error.control === this.for) && error.key === this.key;\r\n  }\r\n\r\n  show(error: ValidationError) {\r\n    this._context = error.errorObject;\r\n  }\r\n\r\n  reset() {\r\n    this._context = undefined;\r\n  }\r\n\r\n  private initializeForOnInit = () => {};\r\n\r\n  /**\r\n   * The ValidationErrors object that contains contextual information about the error, which can be used for\r\n   * displaying, e.g. the minimum length within the error message.\r\n   */\r\n  get context(): any {\r\n    return this._context;\r\n  }\r\n}\r\n","<div *ngIf=\"context\">\r\n  <ng-content></ng-content>\r\n</div>\r\n","import { UntypedFormControl, ValidationErrors } from '@angular/forms';\r\n\r\nexport class ValidationError {\r\n  control: UntypedFormControl;\r\n  key: string;\r\n  errorObject: ValidationErrors;\r\n\r\n  constructor(control: UntypedFormControl, key: string, errorObject: ValidationErrors) {\r\n    this.control = control;\r\n    this.key = key;\r\n    this.errorObject = errorObject;\r\n  }\r\n\r\n  static fromFirstError(control: UntypedFormControl): ValidationError | undefined {\r\n    if (!control.errors) {\r\n      return undefined;\r\n    }\r\n\r\n    return new ValidationError(control, Object.keys(control.errors)[0], control.errors[Object.keys(control.errors)[0]]);\r\n  }\r\n\r\n  hasMessage(): boolean {\r\n    return !!this.getMessage();\r\n  }\r\n\r\n  getMessage() {\r\n    return this.errorObject['message'];\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nimport { ReactiveValidationModuleConfiguration } from './reactive-validation-module-configuration';\r\n\r\nexport const REACTIVE_VALIDATION_MODULE_CONFIGURATION_TOKEN =\r\n  new InjectionToken<ReactiveValidationModuleConfiguration>('ReactiveValidationModuleConfiguration');\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\n/**\r\n * Given a control, returns a string representation of the property path to\r\n * this control. Thus, for a FormControl 'firstName', that is part of a\r\n * FormGroup named 'name', this function will return: 'name.firstName'.\r\n *\r\n * Note that FormArray indexes are also put in the path, e.g.: 'person.0.name.firstName'.\r\n */\r\nexport const getControlPath = (control: AbstractControl): string => {\r\n  const parentControl = control.parent;\r\n  if (parentControl) {\r\n    let path = getControlPath(parentControl);\r\n    if (path) {\r\n      path += '.';\r\n    }\r\n    return path + Object.keys(parentControl.controls).find(key => {\r\n      const controls = parentControl.controls;\r\n      if (Array.isArray(controls)) {\r\n        return controls[Number(key)] === control;\r\n      } else {\r\n        return controls[key] === control;\r\n      }\r\n    });\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { Component, ContentChildren, QueryList, Input, ViewEncapsulation, AfterContentInit,\r\n  OnDestroy, Optional, Inject, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, ControlContainer } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { ValidationMessageComponent } from '../validation-message/validation-message.component';\r\nimport { ValidationError } from '../validation-error';\r\nimport { getFormControlFromContainer, isControlContainerVoidOrInitialized } from '../get-form-control-from-container';\r\nimport { FormDirective } from '../form/form.directive';\r\nimport { ReactiveValidationModuleConfiguration } from '../reactive-validation-module-configuration';\r\nimport { REACTIVE_VALIDATION_MODULE_CONFIGURATION_TOKEN } from '../reactive-validation-module-configuration-token';\r\nimport { getControlPath } from '../get-control-path';\r\n\r\n@Component({\r\n  selector: 'arv-validation-messages',\r\n  templateUrl: './validation-messages.component.html',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n/**\r\n * The ValidationMessagesComponent shows validation messages for one to many FormControls. It either shows\r\n * messages specified within the reactive form model, or shows custom messages declared using the\r\n * ValidationMessageComponent.\r\n */\r\nexport class ValidationMessagesComponent implements AfterContentInit, OnDestroy, OnInit {\r\n  @ContentChildren(ValidationMessageComponent) private messageComponents: QueryList<ValidationMessageComponent> | undefined;\r\n\r\n  private _for: UntypedFormControl[] = [];\r\n  private messageComponentsChangesSubscription = new Subscription();\r\n  private controlStatusChangesSubscription = new Subscription();\r\n\r\n  private formSubmitted: boolean | undefined = undefined;\r\n  private formSubmittedSubscription = new Subscription();\r\n\r\n  constructor(@Optional() private controlContainer: ControlContainer, @Optional() formSubmitDirective: FormDirective,\r\n    @Optional() @Inject(REACTIVE_VALIDATION_MODULE_CONFIGURATION_TOKEN) private configuration: ReactiveValidationModuleConfiguration) {\r\n      if (formSubmitDirective) {\r\n        this.formSubmitted = false;\r\n        this.formSubmittedSubscription.add(formSubmitDirective.submitted.subscribe(() => {\r\n          this.formSubmitted = true;\r\n        }));\r\n      }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForOnInit();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.messageComponentsChangesSubscription.add(this.messageComponents?.changes.subscribe(this.validateChildren));\r\n    this.validateChildren();\r\n\r\n    this._for.forEach(control => {\r\n      this.handleControlStatusChange(control);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.messageComponentsChangesSubscription.unsubscribe();\r\n    this.formSubmittedSubscription.unsubscribe();\r\n    this.controlStatusChangesSubscription.unsubscribe();\r\n  }\r\n\r\n  isValid(): boolean {\r\n    return this.getFirstErrorPerControl().length === 0;\r\n  }\r\n\r\n  getErrorMessages(): string[] {\r\n    return this.getFirstErrorPerControl().filter(error => error.hasMessage())\r\n      .map(error => error.getMessage());\r\n  }\r\n\r\n  private initializeForOnInit = () => {};\r\n\r\n  @Input()\r\n  set for(controls: UntypedFormControl | (UntypedFormControl|string)[] | string) {\r\n    if (!isControlContainerVoidOrInitialized(this.controlContainer)) {\r\n      this.initializeForOnInit = () => this.for = controls;\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(controls)) {\r\n      controls = controls !== undefined ? [controls] : [];\r\n    }\r\n\r\n    if (controls.length === 0) {\r\n      throw new Error(`arv-validation-messages doesn't allow declaring an empty array as input to the 'for' attribute.`);\r\n    }\r\n\r\n    this._for = controls.map(control => typeof control === 'string' ?\r\n      getFormControlFromContainer(control, this.controlContainer) : control);\r\n\r\n    this.validateChildren();\r\n\r\n    this.controlStatusChangesSubscription.unsubscribe();\r\n    this.controlStatusChangesSubscription = new Subscription();\r\n    this._for.forEach(control => {\r\n      this.controlStatusChangesSubscription.add(control.statusChanges.subscribe(() => {\r\n        this.handleControlStatusChange(control);\r\n      }));\r\n    });\r\n  }\r\n\r\n\r\n\r\n  private getFirstErrorPerControl() {\r\n    return this._for.filter(control => this.configuration && this.configuration.displayValidationMessageWhen ?\r\n      this.configuration.displayValidationMessageWhen(control, this.formSubmitted) : control.touched || this.formSubmitted\r\n    ).map(ValidationError.fromFirstError).filter(value => value !== undefined) as ValidationError[];\r\n  }\r\n\r\n  /**\r\n   * Validates that the child ValidationMessageComponents declare what FormControl they specify a message for (when needed); and\r\n   * that the declared FormControl is actually part of the parent ValidationMessagesComponent 'for' collection (when specified).\r\n   */\r\n  private validateChildren() {\r\n    if (!this.messageComponents) {\r\n      return;\r\n    }\r\n\r\n    this.messageComponents.forEach(component => {\r\n      if (this._for.length > 1 && component.for === undefined) {\r\n        throw new Error(`Specify the FormControl for which the arv-validation-message element with key '${component.key}' ` +\r\n          `should show messages.`);\r\n      }\r\n      if (component.for && this._for.indexOf(component.for as UntypedFormControl) === -1) {\r\n        throw new Error(`A arv-validation-messages element with key '${component.key}' attempts to show messages ` +\r\n          `for a FormControl that is not declared in the parent arv-validation-messages element.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private handleControlStatusChange(control: UntypedFormControl) {\r\n    if (!this.messageComponents) {\r\n      return;\r\n    }\r\n\r\n    this.messageComponents.filter(component => component.for === control || component.for === undefined)\r\n      .forEach(component => component.reset());\r\n\r\n    const error = ValidationError.fromFirstError(control);\r\n    if (!error || error.hasMessage()) {\r\n      return;\r\n    }\r\n\r\n    const messageComponent = this.messageComponents.find(component => component.canHandle(error));\r\n\r\n    if (messageComponent) {\r\n      messageComponent.show(error);\r\n    } else {\r\n      throw new Error(`There is no suitable arv-validation-message element to show the '${error.key}' ` +\r\n        `error of '${getControlPath(error.control)}'`);\r\n    }\r\n  }\r\n}\r\n","<div *ngIf=\"!isValid()\">\r\n  <div class=\"invalid-feedback\">\r\n    <p *ngFor=\"let message of getErrorMessages()\">{{message}}</p>\r\n  </div>\r\n  <ng-content></ng-content>\r\n</div>\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ValidationMessagesComponent } from './validation-messages/validation-messages.component';\r\nimport { ValidationMessageComponent } from './validation-message/validation-message.component';\r\nimport { FormDirective } from './form/form.directive';\r\nimport { ReactiveValidationModuleConfiguration } from './reactive-validation-module-configuration';\r\nimport { REACTIVE_VALIDATION_MODULE_CONFIGURATION_TOKEN } from './reactive-validation-module-configuration-token';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ValidationMessagesComponent,\r\n    ValidationMessageComponent,\r\n    FormDirective\r\n  ],\r\n  exports: [\r\n    ValidationMessagesComponent,\r\n    ValidationMessageComponent,\r\n    FormDirective\r\n  ]\r\n})\r\nexport class ReactiveValidationModule {\r\n  static forRoot(configuration?: ReactiveValidationModuleConfiguration): ModuleWithProviders<ReactiveValidationModule> {\r\n    return {\r\n      ngModule: ReactiveValidationModule,\r\n      providers: [{\r\n        provide: REACTIVE_VALIDATION_MODULE_CONFIGURATION_TOKEN, useValue: configuration\r\n      }]\r\n    };\r\n  }\r\n}\r\n","import { ValidatorFn, ValidationErrors, AbstractControl } from '@angular/forms';\r\n\r\n/**\r\n * @dynamic\r\n */\r\nexport class ValidatorDeclaration {\r\n  /**\r\n   * Wraps your own validator functions for use with the angular-reactive-validation library.\r\n   *\r\n   * @param validatorFn A function you want to wrap which can validate a control.\r\n   * @param resultKey The error key used for indicating an error result as returned from the ValidatorFn.\r\n   */\r\n  static wrapNoArgumentValidator(validatorFn: ValidatorFn, resultKey: string):\r\n    (message?: string | (() => string)) => ValidatorFn {\r\n      return (message?: string | (() => string)): ValidatorFn => (control: AbstractControl): ValidationErrors | null =>\r\n      ValidatorDeclaration.validateAndSetMessageIfInvalid(control, () => validatorFn, resultKey, message);\r\n  }\r\n\r\n  /**\r\n   * Wraps your own validator functions for use with the angular-reactive-validation library.\r\n   *\r\n   * @param validatorFactoryFn A function which accepts a single argument and returns a ValidatorFn.\r\n   * @param resultKey The error key used for indicating an error result as returned from the ValidatorFn.\r\n   */\r\n  static wrapSingleArgumentValidator<TInput>(validatorFactoryFn: ((arg1: TInput) => ValidatorFn), resultKey: string):\r\n    (arg1: TInput | (() => TInput), message?: string | ((arg1: TInput) => string)) => ValidatorFn {\r\n\r\n      return (arg1: TInput | (() => TInput), message?: string | ((arg1: TInput) => string)): ValidatorFn =>\r\n      (control: AbstractControl): ValidationErrors | null => {\r\n          const unwrappedArg1 = ValidatorDeclaration.unwrapArgument(arg1);\r\n\r\n          return ValidatorDeclaration.validateAndSetMessageIfInvalid(control, validatorFactoryFn, resultKey, message, unwrappedArg1);\r\n        };\r\n  }\r\n\r\n  /**\r\n   * Wraps your own validator functions for use with the angular-reactive-validation library.\r\n   *\r\n   * @param validatorFactoryFn A function which accepts two arguments and returns a ValidatorFn.\r\n   * @param resultKey The error key used for indicating an error result as returned from the ValidatorFn.\r\n   */\r\n  static wrapTwoArgumentValidator<TInput1, TInput2>(validatorFactoryFn: ((arg1: TInput1, arg2: TInput2) => ValidatorFn), resultKey: string):\r\n    (arg1: TInput1 | (() => TInput1), arg2: TInput2 | (() => TInput2), message?: string | ((arg1: TInput1, arg2: TInput2) => string)) =>\r\n    ValidatorFn {\r\n\r\n      return (arg1: TInput1 | (() => TInput1), arg2: TInput2 | (() => TInput2),\r\n        message?: string | ((arg1: TInput1, arg2: TInput2) => string)): ValidatorFn =>\r\n        (control: AbstractControl): ValidationErrors | null => {\r\n          const unwrappedArg1 = ValidatorDeclaration.unwrapArgument(arg1);\r\n          const unwrappedArg2 = ValidatorDeclaration.unwrapArgument(arg2);\r\n\r\n          return ValidatorDeclaration.validateAndSetMessageIfInvalid(control, validatorFactoryFn, resultKey, message,\r\n            unwrappedArg1, unwrappedArg2);\r\n        };\r\n  }\r\n\r\n  private static unwrapArgument<T>(arg: T | (() => T)): T {\r\n    if (arg instanceof Function) {\r\n      arg = arg();\r\n    }\r\n\r\n    return arg;\r\n  }\r\n\r\n  private static validateAndSetMessageIfInvalid(control: AbstractControl,\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow\r\n    validatorFactoryFn: (...args: any[]) => ValidatorFn, resultKey: string,\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow\r\n    message?: string | ((...args: any[]) => string), ...args: any[]): ValidationErrors | null {\r\n\r\n      const validationResult = ValidatorDeclaration.validate(control, validatorFactoryFn, ...args);\r\n      ValidatorDeclaration.setMessageIfInvalid(control, resultKey, validationResult, message, ...args);\r\n\r\n      return validationResult;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow\r\n  private static validate(control: AbstractControl, validatorFactoryFn: (...args: any[]) => ValidatorFn, ...args: any[]):\r\n    ValidationErrors | null {\r\n\r\n      const wrappedValidatorFn = validatorFactoryFn(...args);\r\n      return wrappedValidatorFn(control);\r\n  }\r\n\r\n  private static setMessageIfInvalid(control: AbstractControl, resultKey: string,\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow\r\n    validationResult: ValidationErrors | null, message?: string | ((...args: any[]) => string), ...args: any[]) {\r\n    if (message) {\r\n      if (validationResult && validationResult[resultKey]) {\r\n        if (typeof message === 'function') {\r\n          message = message(...args);\r\n        }\r\n\r\n        // Not all validators set an object. Often they'll simply set a property to true.\r\n        // Here, we replace any non-object (or array) to be an object on which we can set a message.\r\n        if (!ValidatorDeclaration.isObject(validationResult[resultKey])) {\r\n          validationResult[resultKey] = {};\r\n        }\r\n\r\n        validationResult[resultKey]['message'] = message;\r\n      }\r\n    }\r\n  }\r\n\r\n  private static isObject(arg: any) {\r\n    return arg !== null && typeof arg === 'object' && !Array.isArray(arg);\r\n  }\r\n}\r\n","import { Validators as AngularValidators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { ValidatorDeclaration } from './validator-declaration';\r\n\r\n/**\r\n * Provides a set of validators used by form controls.\r\n *\r\n * Code comments have been copied from the Angular source code.\r\n */\r\nexport class Validators {\r\n/**\r\n * No-op validator.\r\n */\r\n  static nullValidator = AngularValidators.nullValidator;\r\n  static composeAsync = AngularValidators.composeAsync;\r\n\r\n  private static minValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.min, 'min');\r\n  private static maxValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.max, 'max');\r\n  private static minLengthValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.minLength, 'minlength');\r\n  private static maxLengthValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.maxLength, 'maxlength');\r\n  private static patternValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.pattern, 'pattern');\r\n  private static requiredValidator = ValidatorDeclaration.wrapNoArgumentValidator(AngularValidators.required, 'required');\r\n  private static requiredTrueValidator = ValidatorDeclaration.wrapNoArgumentValidator(AngularValidators.requiredTrue, 'required');\r\n  private static emailValidator = ValidatorDeclaration.wrapNoArgumentValidator(AngularValidators.email, 'email');\r\n\r\n  /**\r\n   * Compose multiple validators into a single function that returns the union\r\n   * of the individual error maps.\r\n   */\r\n  static compose(validators: null): null;\r\n  /**\r\n   * Compose multiple validators into a single function that returns the union\r\n   * of the individual error maps.\r\n   */\r\n  static compose(validators: (ValidatorFn|null|undefined)[]): ValidatorFn|null;\r\n  static compose(validators: (ValidatorFn|null|undefined)[]|null): ValidatorFn|null {\r\n    return validators === null ? AngularValidators.compose(validators) : AngularValidators.compose(validators);\r\n  }\r\n\r\n  /**\r\n   * Validator that requires controls to have a value greater than or equal to a number.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static min(min: number): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value greater than or equal to a number.\r\n   */\r\n  static min(min: number, message: string): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value greater than or equal to a number.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static min(min: () => number): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value greater than or equal to a number.\r\n   */\r\n  static min(min: () => number, message: string): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value greater than or equal to a number.\r\n   */\r\n  static min(min: number, messageFunc: ((min: number) => string)): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value greater than or equal to a number.\r\n   */\r\n  static min(min: () => number, messageFunc: ((min: number) => string)): ValidatorFn;\r\n  static min(min: number | (() => number), message?: string | ((min: number) => string)): ValidatorFn {\r\n    return Validators.minValidator(min, message);\r\n  }\r\n  static minDefaultMsg(min: number): ValidatorFn {\r\n    return Validators.maxValidator(min, `This field should not be less than ${min}`);\r\n  }\r\n  /**\r\n   * Validator that requires controls to have a value less than or equal to a number.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static max(max: number): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value less than or equal to a number.\r\n   */\r\n  static max(max: number, message: string): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value less than or equal to a number.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static max(max: () => number): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value less than or equal to a number.\r\n   */\r\n  static max(max: () => number, message: string): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value less than or equal to a number.\r\n   */\r\n  static max(max: number, messageFunc: ((max: number) => string)): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value less than or equal to a number.\r\n   */\r\n  static max(max: () => number, messageFunc: ((max: number) => string)): ValidatorFn;\r\n  static max(max: number | (() => number), message?: string | ((max: number) => string)): ValidatorFn {\r\n    return Validators.maxValidator(max, message);\r\n  }\r\n  static maxDefaultMsg(max: number): ValidatorFn {\r\n    return Validators.maxValidator(max, `This field should not be more than ${max}`);\r\n  }\r\n\r\n  /**\r\n   * Validator that requires controls to have a value of a minimum length.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static minLength(minLength: number): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a minimum length.\r\n   */\r\n  static minLength(minLength: number, message: string): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a minimum length.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static minLength(minLength: () => number): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a minimum length.\r\n   */\r\n  static minLength(minLength: () => number, message: string): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a minimum length.\r\n   */\r\n  static minLength(minLength: number, messageFunc: ((minLength: number) => string)): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a minimum length.\r\n   */\r\n  static minLength(minLength: () => number, messageFunc: ((minLength: number) => string)): ValidatorFn;\r\n  static minLength(minLength: number | (() => number), message?: string | ((minLength: number) => string)): ValidatorFn {\r\n    return Validators.minLengthValidator(minLength, message);\r\n  }\r\n  static minLengthDefaultMsg(minLength: number): ValidatorFn {\r\n    return Validators.maxLengthValidator(minLength, `This field should not be less than ${minLength} characters`);\r\n  }\r\n\r\n  /**\r\n   * Validator that requires controls to have a value of a maximum length.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static maxLength(maxLength: number): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a maximum length.\r\n   */\r\n  static maxLength(maxLength: number, message: string): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a maximum length.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static maxLength(maxLength: () => number): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a maximum length.\r\n   */\r\n  static maxLength(maxLength: () => number, message: string): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a maximum length.\r\n   */\r\n  static maxLength(maxLength: number, messageFunc: ((maxLength: number) => string)): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a value of a maximum length.\r\n   */\r\n  static maxLength(maxLength: () => number, messageFunc: ((maxLength: number) => string)): ValidatorFn;\r\n  static maxLength(maxLength: number | (() => number), message?: string | ((maxLength: number) => string)): ValidatorFn {\r\n    return Validators.maxLengthValidator(maxLength, message);\r\n  }\r\n  static maxLengthDefaultMsg(maxLength: number): ValidatorFn {\r\n    return Validators.maxLengthValidator(maxLength, `This field should not be more than ${maxLength} characters`);\r\n  }\r\n\r\n  /**\r\n   * Validator that requires a control to match a regex to its value.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static pattern(pattern: string|RegExp): ValidatorFn;\r\n  /**\r\n   * Validator that requires a control to match a regex to its value.\r\n   */\r\n  static pattern(pattern: string|RegExp, message: string): ValidatorFn;\r\n  /**\r\n   * Validator that requires a control to match a regex to its value.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static pattern(pattern: () => string|RegExp): ValidatorFn;\r\n  /**\r\n   * Validator that requires a control to match a regex to its value.\r\n   */\r\n  static pattern(pattern: () => string|RegExp, message: string): ValidatorFn;\r\n  static pattern(pattern: (string|RegExp) | (() => string|RegExp), message: string = 'This field should match the pattern '+ pattern): ValidatorFn {\r\n    return Validators.patternValidator(pattern, message);\r\n  }\r\n\r\n  /**\r\n   * Validator that requires controls to have a non-empty value.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static required(): ValidatorFn;\r\n  /**\r\n   * Validator that requires controls to have a non-empty value.\r\n   */\r\n  static required(message: string): ValidatorFn;\r\n  static required(message: string = 'This field is required'): ValidatorFn {\r\n    return Validators.requiredValidator(message);\r\n  }\r\n\r\n  /**\r\n   * Validator that requires control value to be true.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static requiredTrue(): ValidatorFn;\r\n  /**\r\n   * Validator that requires control value to be true.\r\n   */\r\n  static requiredTrue(message: string): ValidatorFn;\r\n  static requiredTrue(message: string = 'This field is required'): ValidatorFn {\r\n    return Validators.requiredTrueValidator(message);\r\n  }\r\n\r\n  /**\r\n   * Validator that performs email validation.\r\n   * Note: when using this function without specifying a message, you have to declare an\r\n   * arv-validation-message element in the HTML with a custom message.\r\n   */\r\n  static email(): ValidatorFn;\r\n  /**\r\n   * Validator that performs email validation.\r\n   */\r\n  static email(message: string): ValidatorFn;\r\n  static email(message: string = 'Enter valid email'): ValidatorFn {\r\n    return Validators.emailValidator(message);\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2","AngularValidators"],"mappings":"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"}